#pragma experiment("BRIDGE_CONNECT")

"""Brand new atopile project!"""

from "parts/Neutrik_NCJ6FA_H/Neutrik_NCJ6FA_H.ato" import Neutrik_NCJ6FA_H_package
from "parts/HOOYA_DIN_327/HOOYA_DIN_327.ato" import HOOYA_DIN_327_package
from "parts/SHOU_HAN_PJ_342/SHOU_HAN_PJ_342.ato" import SHOU_HAN_PJ_342_package

import DifferentialPair
import ElectricalSignal

module App:
    dsp = new DSP
    tops = new StereoXLROutput
    subs = new MonoXLROutput[2]
    mixer_output = new StereoXLRInput
    mixer_input = new StereoRCAOutput
    microphone_input = new MonoXLRInput # TODO: is this balanced?
    mems_microphone = new MEMSMicrophone
    rpi = new RPI # Ethernet included
    usbc_pd = new USBC_PD
    regulator_5v = new Regulator_5V
    dmx = new DMXOut
    oled = new OLED
    mode_button = new Button
    output_gain_knob = new Potentiometer
    i2s_connector = new I2SConnector
    i2c_connector = new QwiicConnector

module MonoXLRInput:
    input_connector = new XLR
    output = new I2S

module StereoRCAOutput:
    input = new I2S
    output_connector_left = new RCA
    output_connector_right = new RCA

module StereoXLRInput:
    input_connector_left = new XLR
    input_connector_right = new XLR
    output = new I2S

module StereoXLROutput:
    input = new I2S
    output_connector_left = new XLR
    output_connector_right = new XLR

module MonoXLROutput:
    input = new I2S
    output_connector = new XLR

module BalancedToI2S:
    input = new XLRInterface
    output = new I2S

    protection = new Protection
    amp = new OpAmp
    adc = new ADC

    #todo: do we need a buffer here?
    input ~> protection ~> amp ~> adc ~> output

module I2SToBalanced:
    input = new I2S
    output = new XLRInterface

    protection = new Protection
    amp = new OpAmp
    adc = new DAC

    #todo: do we need a buffer here?
    input ~> protection ~> amp ~> adc ~> output

module ADC:
    # PCM186x
    pass

module I2S:
    pass

component DSP:
    pass

component DAC:
    # TAD5242
    pass

component Protection:
    pass

# TODO: Add audio interfaces to the standard library
interface BalancedAudioInterface:
    hot = new ElectricalSignal
    cold = new ElectricalSignal
    hot.gnd ~ cold.gnd

# TODO: Add TRS interfaces to the standard library
interface TRSInterface:
    signal ring
    signal tip
    signal sleeve

interface TRSInterfaceMono from TRSInterface:
    audio_signal = new ElectricalSignal
    audio_signal.line ~ tip
    audio_signal.gnd ~ sleeve

interface TRSInterfaceStereo from TRSInterface:
    audio_signal_left = new ElectricalSignal
    audio_signal_right = new ElectricalSignal
    audio_signal_left.line ~ tip
    audio_signal_right.line ~ ring
    audio_signal_left.gnd ~ sleeve
    audio_signal_right.gnd ~ sleeve

interface TRSInterfaceBalanced from TRSInterface:
    balanced_audio = new BalancedAudioInterface
    balanced_audio.hot ~ tip
    balanced_audio.cold ~ ring
    balanced_audio.gnd ~ sleeve

module XLRInput_driver:
    package = new Neutrik_NCJ6FA_H_package
    # XLR
    balanced_audio = new BalancedAudioInterface
    balanced_audio.gnd ~ package.1
    balanced_audio.hot ~ package.2
    balanced_audio.cold ~ package.3
    # 1/4' jack
    balanced_audio.hot ~ T
    balanced_audio.cold ~ R
    balanced_audio.gnd ~ S

module XLROutput_driver:
    package = new HOOYA_DIN_327_package
    balanced_audio = new BalancedAudioInterface
    balanced_audio.gnd ~ package.1
    balanced_audio.hot ~ package.2
    balanced_audio.cold ~ package.3

module TRSAudioJack3mm5_driver:
    package = new SHOU_HAN_PJ_342_package
    audio_signal = new TRSInterfaceStereo
    audio_signal.audio_signal_left.line ~ package.5; audio_signal.audio_signal_left.line ~ package.7
    audio_signal.audio_signal_right.line ~ package.4; audio_signal.audio_signal_right.line ~ package.6
    audio_signal.audio_signal_left.gnd ~ package.3
    audio_signal.audio_signal_right.gnd ~ package.3